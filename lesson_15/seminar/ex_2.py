"""
### –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
üìå–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
–û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
üìå–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å logging.
"""
import logging
from functools import wraps

logging.basicConfig(filename="log.log",
                    encoding="utf-8",
                    level=logging.ERROR,
                    filemode="a")


def deco(func: callable):

    @wraps(func)
    def wrapper(*args, **kwargs):

        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ "
                          f"{args = }, {kwargs = } –≤—ã–¥–∞–≤–∞–ª–∞ –æ—à–∏–±–∫—É: {e = }")
            return None
    return wrapper


@deco
def div(a, b):
    return a/b

if __name__ == "__main__":
    div(2, 0)