"""
### –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå–î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
üìå–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
* —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
* –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
* –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
* –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
* —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""

import logging
from functools import wraps

FORMAT = '{levelname:<8} - {asctime}.–í –º–æ–¥—É–ª–µ "{name}"' \
         '–≤ —Å—Ç—Ä–æ–∫–µ {lineno:03d} —Ñ—É–Ω–∫—Ü–∏—è "{funcName}()"' \
         '–≤ {created} —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:{msg}'

logging.basicConfig(filename="log.log",
                    format=FORMAT,
                    style="{",
                    encoding="utf-8",
                    level=logging.ERROR,
                    filemode="a")


def deco(func: callable):
    @wraps(func)
    def wrapper(*args, **kwargs):

        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ "
                          f"{args = }, {kwargs = } –≤—ã–¥–∞–≤–∞–ª–∞ –æ—à–∏–±–∫—É: {e = }")
            return None

    return wrapper


@deco
def div(a, b):
    return a / b


if __name__ == "__main__":
    div(2, 0)
