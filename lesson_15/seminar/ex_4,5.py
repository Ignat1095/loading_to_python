"""
### –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
üìå–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
üìå–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
üìå–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

### –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
üìå–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
üìå–î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
üìå–ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å.
–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
üìå*–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.
"""
from datetime import datetime, date, timedelta
import logging
from functools import wraps
import argparse

logging.basicConfig(filename="log.log",
                    encoding="utf-8",
                    level=logging.ERROR,
                    filemode="a")


def deco(func: callable):

    @wraps(func)
    def wrapper(*args, **kwargs):

        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ "
                          f"{args = }, {kwargs = } –≤—ã–¥–∞–≤–∞–ª–∞ –æ—à–∏–±–∫—É: {e = }")
            return None
    return wrapper


MONTHS = ("   ", "—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞—è", "–∏—é–Ω", "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫")
WEEKDAYS = ("–ø–æ–Ω", "–≤—Ç–æ", "—Å—Ä–µ", "—á–µ—Ç", "–ø—è—Ç", "—Å—É–±", "–≤–æ—Å")


@deco
def create_date(data: str):
    date_ = date.today().year
    day_, weekday_, month_ = data.split()

    day_ = int(day_[0])
    weekday_ = WEEKDAYS.index(weekday_[:3])
    month_ = MONTHS.index(month_[:3])

    start_data = date(year=date_, month=month_, day=day_)
    count = 0
    for _ in range(32):
        if start_data.weekday() == weekday_:
            count += 1
            if count == day_:
                return start_data
        # print(start_data, start_data.weekday())
        start_data += timedelta(days=1)

    raise ValueError


def pars():
    parser = argparse.ArgumentParser(description='My first argument parser')
    parser.add_argument('-d', '--day', type=str)
    parser.add_argument('-w', '--weekday', type=str)
    parser.add_argument('-m', '--month', type=str)
    args = parser.parse_args()
    return create_date(f'{args.day} {args.weekday} {args.month}')

if __name__ == "__main__":
    # text = "1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è"
    # text2 = "3-—è —Å—Ä–µ–¥–∞ –º–∞—è"
    # print(create_date(text))
    # print(create_date(text2))
    print(pars())