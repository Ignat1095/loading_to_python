# 3. Дополнительная задача:
#
# Добавьте в пакет, созданный на семинаре шахматный модуль.
# Внутри него напишите код, решающий задачу о 8 ферзях.
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга.
# Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 - координаты 8 ферзей.
# Если ферзи не бьют друг друга верните истину, а если бьют - ложь.
# Напишите функцию в шахматный модуль.
# Используйте генератор случайных чисел для случайной расстановки ферзей в задаче выше.
# Проверяйте различный случайные варианты и выведите 4 успешных расстановки.
# Пример, когда задача решена верно:
# _table = [
# [0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0],
# ]
# _SAFE_COMB_EXAMPLE =
# [(0, 0), (6, 1), (4, 2), (7, 3),
# (1, 4), (3, 5), (5, 6), (2, 7)]

queens_count = 8


def queens_place(n=8):
    x = []
    y = []
    for i in range(n):
        nex_x, new_y = [int(xy) for xy in input("Введите в цифрах координаты ферзя:").split()]
        x.append(nex_x)
        y.append(new_y)
    return x, y


def correct_position(n=8) -> bool:
    x, y = queens_place(queens_count)
    correct = True
    for i in range(n):
        for j in range(i + 1, n):
            if x[i] == x[j] or y[i] == y[j] or abs(x[i] - x[j]) == abs(y[i] - y[j]):
                correct = False
    if correct:
        return False
    else:
        return True


print(correct_position(queens_count))
